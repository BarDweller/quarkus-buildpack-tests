name: Multi Platform Runner 

on: 
  workflow_dispatch:

# TODO:
#   Add podman rootful/rootless split testing
#   Add docker testing for linux
#   Add windows podman testing
#   Verify built image is able to run.. 
#   Add test projects for java 8 and java 11 (older spring/quarkus levels needed)  

jobs:
  integration-tests:

    strategy:
      # Each test is a different scenario, do not cancel running tests if one fails.
      fail-fast: false
      matrix:
        # Define projects to test, don't use generated matrix, as will need projects appropriate for each jvm to test
        projects: [
         # { project: "hello-spring", java: "17", java-buildpack-lib-jitpack: "com.github.BarDweller.java-buildpack-client:buildpack-client:8de67fbe32", runner: "macos-13", runtime: "podman5", root: "rootless"},
         # { project: "hello-spring", java: "17", java-buildpack-lib-jitpack: "com.github.BarDweller.java-buildpack-client:buildpack-client:8de67fbe32", runner: "ubuntu-24.04", runtime: "podman4", root: "rootless"},
         # { project: "hello-quarkus", java: "17", java-buildpack-lib-jitpack: "com.github.BarDweller.java-buildpack-client:buildpack-client:8de67fbe32", runner: "macos-13", runtime: "podman5", root: "rootless"}, 
         # { project: "hello-quarkus", java: "17", java-buildpack-lib-jitpack: "com.github.BarDweller.java-buildpack-client:buildpack-client:8de67fbe32", runner: "ubuntu-24.04", runtime: "podman4", root: "rootless"},
         # { project: "hello-quarkus", java: "17", java-buildpack-lib-jitpack: "com.github.BarDweller.java-buildpack-client:buildpack-client:8de67fbe32", runner: "ubuntu-24.04", runtime: "podman5", root: "rootless"},
         # { project: "hello-quarkus", java: "17", java-buildpack-lib-jitpack: "com.github.BarDweller.java-buildpack-client:buildpack-client:8de67fbe32", runner: "ubuntu-24.04", runtime: "docker"}
         # { project: "hello-spring", java: "21", java-buildpack-lib-jitpack: "com.github.BarDweller.java-buildpack-client:buildpack-client:8de67fbe32", runner: "macos-13", runtime: "podman5", root: "rootless"},
         # { project: "hello-spring", java: "21", java-buildpack-lib-jitpack: "com.github.BarDweller.java-buildpack-client:buildpack-client:8de67fbe32", runner: "ubuntu-24.04", runtime: "podman4", root: "rootless"},
         # { project: "hello-quarkus", java: "21", java-buildpack-lib-jitpack: "com.github.BarDweller.java-buildpack-client:buildpack-client:8de67fbe32", runner: "macos-13", runtime: "podman5", root: "rootless"},
         # { project: "hello-quarkus", java: "21", java-buildpack-lib-jitpack: "com.github.BarDweller.java-buildpack-client:buildpack-client:8de67fbe32", runner: "ubuntu-24.04", runtime: "podman4", root: "rootless"},
         { project: "hello-quarkus", java: "21", java-buildpack-lib-jitpack: "com.github.BarDweller.java-buildpack-client:buildpack-client:8de67fbe32", runner: "windows-latest", runtime: "docker"}
        ]

    runs-on: [ "${{ matrix.projects.runner }}" ]
    # Keep name short, as github ui does not allow many characters to be displayed
    name: Java ${{ matrix.projects.java }} ${{ matrix.projects.project }} ${{ matrix.projects.runtime }}

    steps:

      # Maybe no longer required now lib doesn't attempt to download the planet when getting tagless images.
      - name: Freee Disk Space for Ubuntu
        if: matrix.projects.runner == 'ubuntu-24.04'
        uses: jlumbroso/free-disk-space@main
        with:
          tool-cache: false
          android: true
          dotnet: true
          haskell: true
          large-packages: true
          docker-images: true
          swap-storage: false

      # Install and configure podman for mac
      - name: Podman5 Mac
        if: matrix.projects.runner == 'macos-13' && matrix.projects.runtime == 'podman5'
        run: |
          echo "Installing Podman for Mac"
          cd /tmp
          wget -nv "https://github.com/containers/podman/releases/download/v5.3.1/podman-installer-macos-universal.pkg"
          sudo installer -pkg /tmp/podman-installer-macos-universal.pkg -target /
          export PATH=$PATH:/opt/podman/bin

          # Add Podman to path for future steps.
          echo "/opt/podman/bin" >> $GITHUB_PATH

          # launch podman
          podman machine init
          podman machine start

          # reconfigure timeouts inside podman vm to be compatible with java docker api
          echo 'mkdir -p /etc/containers/containers.conf.d && printf "[engine]\nservice_timeout=91\n" > /etc/containers/containers.conf.d/service-timeout.conf && systemctl restart podman.socket' |  podman machine ssh --username root --
      
      # Configure podman for ubuntu
      - name: Podman4 Ubuntu
        if: matrix.projects.runner == 'ubuntu-24.04' && matrix.projects.runtime == 'podman4'
        run: |
          echo "Configuring Podman 4 for ubuntu" 

          # reconfigure timeouts for podman to be compatible with java docker api
          sudo mkdir -p /etc/containers/containers.conf.d
          printf "[engine]\nservice_timeout=91\n" | sudo tee -a /etc/containers/containers.conf.d/service-timeout.conf

          # start the podman user socket
          systemctl --user start podman.socket

      - name: Set up Homebrew
        if: matrix.projects.runner == 'ubuntu-24.04' && matrix.projects.runtime == 'podman5'
        uses: Homebrew/actions/setup-homebrew@master

      - name: Podman5 Ubuntu
        if: matrix.projects.runner == 'ubuntu-24.04' && matrix.projects.runtime == 'podman5'
        run: |
          echo "Configuring Podman 5 for ubuntu" 

          # Remove the old crun executable to let brew to install a newer one ...
          sudo apt-get remove crun
          
          # Use brew to install podman 5
          brew install podman
          brew services start podman
          
          # reconfigure timeouts for podman to be compatible with java docker api
          sudo mkdir -p /etc/containers/containers.conf.d
          printf "[engine]\nservice_timeout=91\n" | sudo tee -a /etc/containers/containers.conf.d/service-timeout.conf

          # restart to allow config to take effect
          brew services restart podman    
          
      - name: Docker Ubuntu
        if: matrix.projects.runner == 'ubuntu-24.04' && matrix.projects.runtime == 'docker'
        run: |
          echo "Configuring Docker for ubuntu" 

          # Remove the podman, to allow library autodetect to find docker
          sudo apt-get remove podman
        
      # Dump info about podman in case we need to report errors
      - name: Podman info
        if: matrix.projects.runtime == 'podman4' || matrix.projects.runtime == 'podman5'
        run: |
          echo "Podman information"
          podman info

      - name: Docker info
        if: matrix.projects.runtime == 'docker'
        run: |
          echo "Docker information"
          docker info

      # Install appropriate level jdk
      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          java-version: ${{ matrix.projects.java }}
          distribution: 'adopt'

      # Install jbang (required to run tests)
      - name: Setup jbang (unix)
        if: matrix.projects.runner == 'macos-13' || matrix.projects.runner == 'ubuntu-24.04'
        run: |
          curl -Ls "https://sh.jbang.dev" | bash -s - app setup

          # Add jbang to the path for future steps.
          echo "$HOME/.jbang/bin" >> $GITHUB_PATH

      - name: Setup jbang (win)
        if: matrix.projects.runner == 'windows-latest'
        run: |
          iex "& { $(iwr -useb https://ps.jbang.dev) } app setup"

          # Add jbang to the path for future steps.
          echo "$HOME\.jbang\bin" >> $GITHUB_PATH        
          
      # Checkout the project
      - name: Checkout
        uses: actions/checkout@v4

      - name: Build test project (win)
        if: matrix.projects.runner == 'windows-latest'
        run: |
          echo "Setting up to build ${{ matrix.projects.project }} with ${{ matrix.projects.java-buildpack-lib-jitpack}} on ${{ matrix.projects.runner }}"
          $env:CURRENT_WORKFLOW_DEP="${{ matrix.projects.java-buildpack-lib-jitpack }}"
          $env:PROJECT_PATH="${{ matrix.projects.project }}"
          $env:JDK="${{ matrix.projects.java }}"

          echo "Setting up JBang command"
          $jbang = ([scriptblock]::Create($(iwr -useb https://ps.jbang.dev)))

          echo "Launching JBang"
          cd test-projects
          & $jbang run RunTest.java
          $jrc = $LASTEXITCODE
          
          echo "After jbang result: $jrc"
          exit $jrc
          
      # Build the matrix specificied project with the options configured.
      - name: Build test project (unix)
        if: matrix.projects.runner == 'macos-13' || matrix.projects.runner == 'ubuntu-24.04'
        run: |
          echo Setting up to build ${{ matrix.projects.project }} with ${{ matrix.projects.java-buildpack-lib-jitpack}} on ${{ matrix.projects.runner }}
          export CURRENT_WORKFLOW_DEP=${{ matrix.projects.java-buildpack-lib-jitpack }}
          export PROJECT_PATH=./test-projects/${{ matrix.projects.project }}
          export JDK=${{ matrix.projects.java }}

          chmod +x ./test-projects/RunTest.java
          ./test-projects/RunTest.java
